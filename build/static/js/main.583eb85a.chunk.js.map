{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TakeMoney","onToken","token","fetch","method","body","JSON","stringify","then","response","json","data","alert","email","this","stripeKey","name","amount","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sNAGqBA,E,2MACnBC,QAAU,SAACC,GACTC,MAAM,qBAAsB,CAC1BC,OAAQ,OACRC,KAAMC,KAAKC,UAAUL,KACpBM,MAAK,SAAAC,GACNA,EAASC,OAAOF,MAAK,SAAAG,GACnBC,MAAM,uBAAD,OAAwBD,EAAKE,e,wEAQtC,OAEE,kBAAC,IAAD,CACEX,MAAOY,KAAKb,QACZc,UAAU,6CACVC,KAAO,YACPC,OAAU,W,GArBqBC,IAAMC,WCSzBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.583eb85a.chunk.js","sourcesContent":["import React from 'react'\nimport StripeCheckout from 'react-stripe-checkout';\n\nexport default class TakeMoney extends React.Component {\n  onToken = (token) => {\n    fetch('/save-stripe-token', {\n      method: 'POST',\n      body: JSON.stringify(token),\n    }).then(response => {\n      response.json().then(data => {\n        alert(`We are in business, ${data.email}`);\n      });\n    });\n  }\n\n  // ...\n\n  render() {\n    return (\n      // ...\n      <StripeCheckout\n        token={this.onToken}\n        stripeKey=\"pk_test_rpJFYMoN3dlgpDND53RFbjz800n6Rl2nMN\"\n        name = \"Auctionly\"\n        amount = {1000000000000}\n      />\n    )\n  }\n\n\n\n\n\n  // List of props that can be changed within this checkout button\n  \n  /* <StripeCheckout\n  name=\"Three Comma Co.\" // the pop-in header title\n  description=\"Big Data Stuff\" // the pop-in header subtitle\n  image=\"https://stripe.com/img/documentation/checkout/marketplace.png\" // the pop-in header image (default none)\n  ComponentClass=\"div\"\n  label=\"Buy the Thing\" // text inside the Stripe button\n  panelLabel=\"Give Money\" // prepended to the amount in the bottom pay button\n  amount={1000000} // cents\n  currency=\"USD\"\n  stripeKey=\"...\"\n  locale=\"zh\"\n  email=\"info@vidhub.co\"\n  // Note: Enabling either address option will give the user the ability to\n  // fill out both. Addresses are sent as a second parameter in the token callback.\n  shippingAddress\n  billingAddress={false}\n  // Note: enabling both zipCode checks and billing or shipping address will\n  // cause zipCheck to be pulled from billing address (set to shipping if none provided).\n  zipCode={false}\n  alipay // accept Alipay (default false)\n  bitcoin // accept Bitcoins (default false)\n  allowRememberMe // \"Remember Me\" option (default true)\n  token={this.onToken} // submit callback\n  opened={this.onOpened} // called when the checkout popin is opened (no IE6/7)\n  closed={this.onClosed} // called when the checkout popin is closed (no IE6/7)\n  // Note: `reconfigureOnUpdate` should be set to true IFF, for some reason\n  // you are using multiple stripe keys\n  reconfigureOnUpdate={false}\n  // Note: you can change the event to `onTouchTap`, `onClick`, `onTouchStart`\n  // useful if you're using React-Tap-Event-Plugin\n  triggerEvent=\"onTouchTap\"\n  >\n  <button className=\"btn btn-primary\">\n    Use your own child component, which gets wrapped in whatever\n    component you pass into as \"ComponentClass\" (defaults to span)\n  </button>\n</StripeCheckout> */\n\n\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}